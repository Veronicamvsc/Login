//
//  DetalleView.swift
//  SwiftUI07
//
//  Created by JosÃ© Antonio Lara SÃ¡nchez on 12/2/25.
//

import SwiftUI // ğŸ“Œ Importamos SwiftUI para construir la interfaz grÃ¡fica.

struct DetalleView: View { // ğŸ“Œ Vista que muestra los detalles de un usuario.
    var id: Int // âœ… Identificador del usuario a consultar.
    
    @StateObject var user = DetalleViewModel() // âœ… `@StateObject` crea una instancia de `DetalleViewModel`, que manejarÃ¡ la obtenciÃ³n de datos del usuario.

    var body: some View {
        VStack { // âœ… Organiza los elementos en una columna vertical.
            
            if user.avatar.isEmpty { // âœ… Si `avatar` estÃ¡ vacÃ­o, significa que aÃºn no se han cargado los datos.
                ProgressView() // ğŸ”µ Muestra un indicador de carga mientras se obtiene la informaciÃ³n del usuario.
            } else { // âœ… Cuando `avatar` ya tiene datos, se muestra la informaciÃ³n del usuario.
                
                AsyncImage(url: URL(string: user.avatar)!) { image in // âœ… Carga la imagen de perfil de manera asÃ­ncrona.
                    image
                        .resizable() // ğŸ”µ Permite que la imagen se pueda escalar.
                        .frame(width: 130, height: 130) // ğŸ”µ Define un tamaÃ±o fijo de 130x130 pÃ­xeles.
                        .clipped() // ğŸ”µ Recorta la imagen si es necesario.
                        .clipShape(Circle()) // ğŸ”µ Convierte la imagen en un cÃ­rculo.
                } placeholder: {
                    ProgressView() // ğŸ”µ Muestra un indicador de carga mientras se obtiene la imagen.
                }
                
                Text(user.first_name) // âœ… Muestra el nombre del usuario.
                    .font(.largeTitle) // ğŸ”µ Define un tamaÃ±o de fuente grande.

                Text(user.email) // âœ… Muestra el correo electrÃ³nico del usuario.
                    .font(.title) // ğŸ”µ Define un tamaÃ±o de fuente mÃ¡s pequeÃ±o que el nombre.
            }
        }
        .onAppear() { // âœ… `onAppear` se ejecuta cuando la vista aparece en pantalla.
            user.fetch(id: id) // ğŸ”µ Llama a `fetch(id:)` en `DetalleViewModel` para obtener los datos del usuario.
        }
    }
}


